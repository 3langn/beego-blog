swagger: "2.0"
info:
  title: beego Test API
  description: beego has a very cool tools to autogenerate documents for your API
  version: 1.0.0
  termsOfService: http://beego.me/
  contact:
    email: astaxie@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
basePath: /v1
paths:
  /auth/login:
    post:
      tags:
      - auth
      description: Logs user into the system
      operationId: AuthController.Login
      parameters:
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/dtos.Login'
      responses:
        "200":
          description: '{int} body models.User'
        "400":
          description: Login failed
  /auth/register:
    post:
      tags:
      - auth
      description: Register users
      operationId: AuthController.Register
      parameters:
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/dtos.Login'
      responses:
        "200":
          description: '{int} body models.User'
        "403":
          description: body is empty
  /categories/:
    get:
      tags:
      - categories
      description: get category
      operationId: CategoryController.GetAll
      parameters:
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Category'
        "500":
          description: Internal Server Error
    post:
      tags:
      - categories
      description: create category
      operationId: CategoryController.Create
      parameters:
      - in: body
        name: body
        description: body for category content
        required: true
        schema:
          $ref: '#/definitions/models.Category'
      responses:
        "200":
          description: '{int} models.Category.Id'
        "500":
          description: internal server error
  /categories/{id}:
    get:
      tags:
      - categories
      description: get category by id
      operationId: CategoryController.Get
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Category'
        "403":
          description: :id is empty
  /post/:
    get:
      tags:
      - post
      description: create post
      operationId: PostController.GetPosts
      responses:
        "200":
          description: '{int} body models.Post'
        "500":
          description: Internal Server Error
    post:
      tags:
      - post
      description: create post
      operationId: PostController.CreatePost
      parameters:
      - in: body
        name: body
        description: body for post
        required: true
        schema:
          $ref: '#/definitions/dtos.CreatePostDto'
      responses:
        "200":
          description: '{int} body models.User'
        "500":
          description: Internal Server Error
  /post/{id}:
    get:
      tags:
      - post
      description: get Post by id
      operationId: PostController.GetPostById
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Post'
        "500":
          description: Internal Server Error
    delete:
      tags:
      - post
      description: delete Post by id
      operationId: PostController.DeletePost
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: '{string} delete success!'
        "500":
          description: Internal Server Error
  /user/:
    get:
      tags:
      - user
      description: Get all users
      operationId: UserController.Get all users
      responses:
        "200":
          description: '{int} body []*models.User'
        "403":
          description: body is empty
definitions:
  dtos.CreatePostDto:
    title: CreatePostDto
    type: object
    properties:
      content:
        type: string
      title:
        type: string
      user_id:
        type: integer
        format: int64
  dtos.Login:
    title: Login
    type: object
    properties:
      password:
        type: string
      username:
        type: string
  models.Category:
    title: Category
    type: object
    properties:
      id:
        type: integer
        format: int64
      posts:
        type: array
        items:
          $ref: '#/definitions/models.Post'
      slug:
        type: string
      title:
        type: string
  models.Post:
    title: Post
    type: object
    properties:
      author:
        $ref: '#/definitions/models.User'
      content:
        type: string
      id:
        type: integer
        format: int64
      title:
        type: string
  models.Token:
    title: Token
    type: object
    properties:
      id:
        type: integer
        format: int64
      token:
        type: string
      type:
        type: string
      user:
        $ref: '#/definitions/models.User'
  models.User:
    title: User
    type: object
    properties:
      id:
        type: integer
        format: int64
      posts:
        type: array
        items:
          $ref: '#/definitions/models.Post'
      token:
        type: array
        items:
          $ref: '#/definitions/models.Token'
      username:
        type: string
